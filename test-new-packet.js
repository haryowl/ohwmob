const GalileoskyParser = require('./backend/src/services/parser');

// New packet data from the mobile server log
const newPacketData = Buffer.from('', 'hex');

console.log('Analyzing new packet data...');
console.log('Packet length:', newPacketData.length);
console.log('Packet header:', `0x${newPacketData[0].toString(16)}`);
console.log('Packet length bytes:', newPacketData.slice(1, 3).toString('hex'));

// Parse the length
const rawLength = newPacketData.readUInt16LE(1);
const hasUnsentData = (rawLength & 0x8000) !== 0;
const actualLength = rawLength & 0x7FFF;

console.log('Raw length:', rawLength);
console.log('Has unsent data:', hasUnsentData);
console.log('Actual length:', actualLength);

// Extract data portion
const dataStart = 3;
const dataEnd = dataStart + actualLength;
const data = newPacketData.slice(dataStart, dataEnd);

console.log('\nData portion (first 100 bytes):', data.slice(0, 100).toString('hex'));

// Analyze the data structure
console.log('\n=== Analyzing Data Structure ===');

// Look for 0x10 tags (record markers) and analyze the structure
let recordCount = 0;
let offset = 0;
const recordOffsets = [];

while (offset < data.length) {
    if (data[offset] === 0x10) {
        recordCount++;
        recordOffsets.push(offset);
        console.log(`Record ${recordCount} starts at offset ${offset}`);
        
        // Show next few bytes after 0x10
        const nextBytes = data.slice(offset, offset + 20);
        console.log(`  Next bytes: ${nextBytes.toString('hex')}`);
        
        // Try to find the next 0x10 tag
        let nextRecordStart = offset + 1;
        while (nextRecordStart < data.length && data[nextRecordStart] !== 0x10) {
            nextRecordStart++;
        }
        
        if (nextRecordStart < data.length) {
            const recordLength = nextRecordStart - offset;
            console.log(`  Record ${recordCount} length: ${recordLength} bytes`);
            
            // Analyze the record structure
            const recordData = data.slice(offset, nextRecordStart);
            console.log(`  Record data: ${recordData.toString('hex')}`);
            
            // Look for valid tags in this record
            let tagOffset = 0;
            const foundTags = [];
            while (tagOffset < recordData.length) {
                const tag = recordData[tagOffset];
                if (tag === 0x10 || tag === 0x20 || tag === 0x21 || tag === 0x30 || 
                    tag === 0x33 || tag === 0x34 || tag === 0x35 || tag === 0x40 || 
                    tag === 0x41 || tag === 0x42 || tag === 0x45 || tag === 0x46 || 
                    tag === 0x50 || tag === 0x51 || tag === 0x52 || tag === 0xe2 || 
                    tag === 0xfe) {
                    foundTags.push(`0x${tag.toString(16)}`);
                }
                tagOffset++;
            }
            console.log(`  Valid tags found: ${foundTags.join(', ')}`);
        }
    }
    offset++;
}

console.log(`\nTotal records found: ${recordCount}`);

// Test with the parser
console.log('\n=== Testing with Parser ===');
const parser = new GalileoskyParser();

async function testNewPacket() {
    try {
        const result = await parser.parse(newPacketData);
        console.log('Parser result:', {
            header: `0x${result.header.toString(16)}`,
            length: result.length,
            hasUnsentData: result.hasUnsentData,
            recordsFound: result.records.length
        });
        
        if (result.records.length > 0) {
            console.log('\nFirst record tags:', Object.keys(result.records[0].tags));
            console.log('\nFirst record archive number:', result.records[0].tags['0x10']);
        }
        
    } catch (error) {
        console.error('Parser error:', error.message);
    }
}

testNewPacket(); 